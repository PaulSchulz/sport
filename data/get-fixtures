#!/bin/bash
# Download the JSPN data for the competition fixtures.
# TODO: Change SPORTID to EVENT

if [ "x$1" == "x" ]
then
    echo "# Please supply a SPORTID argument"
    echo "# Visit https://fixturedownload.com for available data sets"
    exit
fi
cd ${0%/*}
SPORTID=$1
DATA_DIR="data/$SPORTID/"
FIXTURE_PATH="data/$SPORTID/fixtures.json"
DATA_PATH="data/$SPORTID/data.clj"
CUSTOM_PATH="data/$SPORTID/custom.clj"

function create_dir {
    mkdir $SPORTID
}

# This needs to be called from within the sub-directory
function download {
    echo -n "# DOWNLOADING"
    wget https://fixturedownload.com/feed/json/$SPORTID -O - 2>/dev/null | jq > fixtures.json
    echo " (done)"
    echo "# $SPORTID/fixtures.json"
}

function write_data {
    cat<<EOF
{:event "$SPORTID"
 :data "$DATA_PATH",
 :details
     {:title "",
      :location "",
      :code nil,
      :date "",
      :url ""
      :datadir "$DATA_DIR"
      :fixtures "$FIXTURE_PATH",
      :data "$DATA_PATH",
      :custom "$CUSTOM_PATH"
     }
}
EOF
}

function write_custom {
    cat<<EOF
;; Custom functions for manipulating data
;; Needs to return 'unknown' (usually :home or :away) so that
;; score and scoreboard maps can be built without duplicate keys
(defn map-team-id [name unknown]
  (case name
    "To be announced"   unknown
    unknown))
EOF
}

echo "# SPORTID: $SPORTID"
if [ -d "$SPORTID" ]
then
    echo "# Data directory exists, exiting"
    exit
fi

create_dir
cd $SPORTID
download

echo "# $SPORTID/data.clj"
write_data
write_data >"data.clj"

echo "# $SPORTID/custom.clj"
write_custom
write_custom >"custom.clj"

echo "# FINISHED"
